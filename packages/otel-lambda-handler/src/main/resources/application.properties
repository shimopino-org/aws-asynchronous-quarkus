# Lambda Function 設定
# --------------------------------------------------------------------------------------
# quarkus.lambda.handler は、Quarkus が AWS Lambda のハンドラークラスを特定するために使用します。
# ここで指定された値 (この場合は "otel") は、対応するハンドラークラス (例: OtelLambdaHandler) を
# CDI コンテナ内から検索する際の識別子として機能します。
#
# 設定しない場合:
#   正しいハンドラークラスが特定できず、Lambda 関数の起動時に「Unable to find handler class」
#   といったエラーや不具合が発生する可能性があります。
quarkus.lambda.handler=otel

# ネイティブビルド設定
# --------------------------------------------------------------------------------------
# quarkus.native.container-build は、ネイティブイメージのビルド時に、Docker コンテナ上での
# ビルドを有効にします。特に、ローカル環境で必要なビルドツールや依存ライブラリが整っていない場合、
# Docker を利用することで安定したビルド環境を確保できます。
#
# 設定しない場合:
#   環境によってはネイティブイメージのビルドに失敗し、パフォーマンス向上や低い起動時間の恩恵
#   (実際のAWS Lambda環境に近い実行環境) を享受できなくなる可能性があります。
quarkus.native.container-build=true

# OpenTelemetry SDK の有効化
# --------------------------------------------------------------------------------------
# quarkus.otel.sdk.disabled は、OpenTelemetry SDK の動作を有効または無効にする設定です。false に
# 設定することで、トレースの計測が有効になり、アプリケーションの処理に関する詳細なトレース情報が
# 取得できるようになります。
#
# 設定しない (または true の場合):
#   トレースの計測が無効となり、アプリケーションのパフォーマンスや挙動のモニタリングができなくなります。
quarkus.otel.sdk.disabled=false

# OTLP エクスポーター エンドポイント
# --------------------------------------------------------------------------------------
# quarkus.otel.exporter.otlp.traces.endpoint は、OpenTelemetry のトレースデータを送信する先となる
# OTLP (OpenTelemetry Protocol) エンドポイントを指定します。ここではローカルに存在する OpenTelemetry コレクター
# (http://localhost:4317) を指定して、開発時にトレースデータを確認できるようにしています。
#
# 設定しない場合:
#   トレースデータが正しいエンドポイントに送信されず、外部のトレース収集システムやモニタリングツール
#   での可視化・分析が行えなくなります。
quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317

# トレースサンプラー設定
# --------------------------------------------------------------------------------------
# quarkus.otel.traces.sampler は、トレース計測時のサンプルポリシーを指定します。ここでは "always_on" に
# 設定しており、全てのリクエスト・処理をトレースするようになっています。この設定は、詳細なトレース情報を
# 収集する際に非常に有用です。
#
# 設定しない場合:
#   デフォルトのサンプルポリシーが適用され、トレースが一部しか収集されなかったり、必要なトレース情報
#   が失われる可能性があります。特に、動作検証やパフォーマンス解析を行う際に情報不足となる恐れがあります。
quarkus.otel.traces.sampler=always_on